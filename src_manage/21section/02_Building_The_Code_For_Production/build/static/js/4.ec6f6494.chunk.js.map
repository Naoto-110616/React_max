{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"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","file":"static/js/4.ec6f6494.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n\tconst commentTextRef = useRef();\n\n\tconst { sendRequest, status, error } = useHttp(addComment);\n\n\tconst { onAddedComment } = props;\n\n\tuseEffect(() => {\n\t\tif (status === \"completed\" && !error) {\n\t\t\tonAddedComment();\n\t\t}\n\t}, [status, error, onAddedComment]);\n\tconst submitFormHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tconst enteredText = commentTextRef.current.value;\n\n\t\t// optional: Could validate here\n\n\t\tsendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n\t};\n\n\treturn (\n\t\t<form className={classes.form} onSubmit={submitFormHandler}>\n\t\t\t{status === \"pending\" && (\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className={classes.control} onSubmit={submitFormHandler}>\n\t\t\t\t<label htmlFor=\"comment\">Your Comment</label>\n\t\t\t\t<textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n\t\t\t</div>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button className=\"btn\">Add Comment</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n\tconst [isAddingComment, setIsAddingComment] = useState(false);\n\tconst params = useParams();\n\n\tconst { quoteId } = params;\n\n\tconst { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n\tuseEffect(() => {\n\t\tsendRequest(quoteId);\n\t}, [quoteId, sendRequest]);\n\n\tconst startAddCommentHandler = () => {\n\t\tsetIsAddingComment(true);\n\t};\n\n\tconst addedCommentHandler = useCallback(() => {\n\t\tsendRequest(quoteId);\n\t}, [sendRequest, quoteId]);\n\n\tlet comments;\n\n\tif (status === \"pending\") {\n\t\tcomments = (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<LoadingSpinner />\n\t\t\t</div>\n\t\t);\n\t}\n\tif (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n\t\tcomments = <CommentsList comments={loadedComments} />;\n\t}\n\n\tif (\n\t\tstatus === \"completed\" &&\n\t\t(!loadedComments || loadedComments.length === 0)\n\t) {\n\t\tcomments = <p className=\"centered\">No comments were added yet!</p>;\n\t}\n\n\treturn (\n\t\t<section className={classes.comments}>\n\t\t\t<h2>User Comments</h2>\n\t\t\t{!isAddingComment && (\n\t\t\t\t<button className=\"btn\" onClick={startAddCommentHandler}>\n\t\t\t\t\tAdd a Comment\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{isAddingComment && (\n\t\t\t\t<NewCommentForm\n\t\t\t\t\tquoteId={quoteId}\n\t\t\t\t\tonAddedComment={addedCommentHandler}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{comments}\n\t\t</section>\n\t);\n};\n\nexport default Comments;\n","import { useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = () => {\n\tconst params = useParams();\n\tconst match = useRouteMatch();\n\n\tconst { quoteId } = params;\n\n\tconst {\n\t\tsendRequest,\n\t\tstatus,\n\t\tdata: loadedQuotes,\n\t\terror,\n\t} = useHttp(getSingleQuote, true);\n\n\tuseEffect(() => {\n\t\tsendRequest(quoteId);\n\t}, [sendRequest, quoteId]);\n\n\tif (status === \"pending\") {\n\t\treturn (\n\t\t\t<div className=\"centered\">\n\t\t\t\t<LoadingSpinner />\n\t\t\t</div>\n\t\t);\n\t}\n\tif (error) {\n\t\treturn <p className=\"centered\">{error}</p>;\n\t}\n\n\tif (!loadedQuotes.text) {\n\t\treturn <p>No quote found!</p>;\n\t}\n\n\treturn (\n\t\t<section>\n\t\t\t<HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\n\t\t\t<Route path={match.path} exact>\n\t\t\t\t<div className=\"centered\">\n\t\t\t\t\t<Link className=\"btn--flat\" to={`${match.url}/comments`}>\n\t\t\t\t\t\tLoad Comments\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</Route>\n\t\t\t<Route path={`${match.path}/comments`}>\n\t\t\t\t<Comments />\n\t\t\t</Route>\n\t\t</section>\n\t);\n};\nexport default QuoteDetail;\n"],"sourceRoot":""}